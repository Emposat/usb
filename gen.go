// +build ignore

package main

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"time"
)

/*
	This file is not part of the final usb package.
	It is a build step to generate code files that
	*will* be part of the usb package.
*/

func main() {
	idsURL := "https://usb-ids.gowdy.us/usb.ids.bz2"
	web, err := http.Get(idsURL)
	if err != nil {
		panic(err)
	}

	var b bytes.Buffer
	b64 := base64.NewEncoder(base64.StdEncoding, &b)
	_, err = io.Copy(b64, web.Body)
	if err != nil {
		panic(err)
	}
	web.Body.Close()
	b64.Close()

	var s strings.Builder
	chunk := make([]byte, 80)
	for n, _ := b.Read(chunk); n > 0; n, _ = b.Read(chunk) {
		s.Write(chunk[0:n])
		s.WriteString("\n")
	}

	w, err := os.Create("lclUsbIds.go")
	if err != nil {
		panic(err)
	}
	defer w.Close()

	fmt.Fprintf(w, `// Code generated by usb (gen.go). DO NOT EDIT.
// It was generated from https://usb-ids.gowdy.us/usb.ids on %s

package usb

import (
	"compress/bzip2"
	"encoding/base64"
	"io"
	"strings"
)

func shippedUsbIds() io.Reader {
	return bzip2.NewReader(base64.NewDecoder(base64.StdEncoding, strings.NewReader(`+"`"+`
%s`+"`"+`)))
}
`, time.Now().Format("Jan 2 2006"), s.String())
}
